---
- name: Importer CSV depuis une URL
  hosts: localhost
  gather_facts: true 
  vars:
    local_csv_path: "/tmp/temperature.csv"
    temperatures_list: "{{ lookup('csvfile', \"/tmp/temperature.csv delimiter=,\") }}"
    latitude: 43.604652 
    longitude: 1.444209 
    api_url: "https://api.open-meteo.com/v1/forecast"
    timezone: "UTC"
    
  tasks:
    - name: Lire le fichier CSV de températures
      ansible.builtin.read_csv:
        path: "{{ local_csv_path }}" 
        delimiter: ','
      register: temp_data

    - name: Supprimer les doublons et trier par heure
      ansible.builtin.set_fact:
        temp_cleaned: "{{ temp_data.list | unique | sort(attribute='time') }}"

    - name: Afficher les données nettoyées
      ansible.builtin.debug:
        var: temp_cleaned

    - name: Obtenir l'heure UTC actuelle tronquée à l'heure
      ansible.builtin.set_fact:
        now_hour: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:00') }}"

    - name: Afficher l'heure UTC actuelle tronquée à l'heure
      ansible.builtin.debug:
        var: now_hour

    - name: Appeler l'API Open-Meteo
      ansible.builtin.uri:
        url: "{{ api_url }}?latitude={{ latitude }}&longitude={{ longitude }}&hourly=temperature_2m&timezone={{ timezone }}"
        method: GET
        return_content: yes
      register: meteo_response

    - name: Analyser la réponse JSON
      ansible.builtin.set_fact:
        hourly_data: "{{ meteo_response.json.hourly }}"

    - name: Analyser la réponse JSON
      ansible.builtin.set_fact:
        hourly_data: "{{ meteo_response.json.hourly }}"

    - name: Vérifier si l'heure actuelle est présente
      ansible.builtin.set_fact:
        temp_index: "{{ hourly_data.time.index(now_hour) }}"
      when: now_hour in hourly_data.time

    - name: Afficher l’index trouvé
      debug:
        var: temp_index
      when: temp_index is defined

    - name: Extraire la température actuelle
      ansible.builtin.set_fact:
        #current_temp: "{{ hourly_data.temperature_2m[temp_index] }}"
        current_temp: "{{ hourly_data.temperature_2m[8] }}"
      when: temp_index is defined

    - name: Afficher la température actuelle
      ansible.builtin.debug:
        msg: "Température à {{ now_hour }} UTC : {{ current_temp }}°C"
      when: current_temp is defined

    - name: Message si l'heure n'est pas disponible
      ansible.builtin.debug:
        msg: "Aucune donnée pour l'heure actuelle : {{ now_hour }}"
      when: current_temp is not defined
